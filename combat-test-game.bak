#lang racket
(require "combat.rkt")
(require "spells.rkt")
(require "items.rkt")
(require "dungeons.rkt")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TEST COMBAT
(require 2htdp/image)
(require 2htdp/universe)

;; Characters ------------------------------------------------------------------------------------------------
(define KNIGHT
  (new player%
       [name "Knight"] [health 800] [max-health 800] [base-agility 1]
       [agility 1] [base-strength 10] [strength 10] [spells empty]
       [character-inventory (make-inventory SWORD empty empty empty)]
       [weakness 'none] [resistance 'none]
       [animation (make-animation (flip-horizontal (bitmap/file "knight_standby.png"))
                                  (flip-horizontal (bitmap/file "knight_attack.png"))
                                  (flip-horizontal (bitmap/file "knight_standby.png"))
                                  (flip-horizontal (bitmap/file "knight_flinch.png"))
                                  (flip-horizontal (bitmap/file "knight_standby.png"))
                                  (flip-horizontal (bitmap/file "knight_standby.png")))]
       [position (make-posn 0 0)] [level 1] [max-mp 0] [mp 0] [current-xp 1500]))

(define MAGE
  (new player%
       [name "Mage"] [health 500] [max-health 500] [base-agility .9]
       [agility .9] [base-strength 1] [strength 1] [spells (list HEAL DOOM-ROCK)]
       [character-inventory (make-inventory STAFF empty (list MAGIC-POTION) empty)]
       [weakness 'none] [resistance 'none]
       [animation (make-animation (flip-horizontal (bitmap/file "knight_standby.png"))
                                  (flip-horizontal (bitmap/file "knight_attack.png"))
                                  (flip-horizontal (bitmap/file "knight_standby.png"))
                                  (flip-horizontal (bitmap/file "knight_flinch.png"))
                                  (flip-horizontal (bitmap/file "knight_standby.png"))
                                  (flip-horizontal (bitmap/file "knight_standby.png")))]
       [position (make-posn 0 0)] [level 1] [max-mp 50] [mp 50] [current-xp 1500]))

(define SPELLSWORD
  (new player%
       [name "Spellsword"] [health 600] [max-health 600] [base-agility 1]
       [agility 1] [base-strength 5] [strength 5] [spells (list HEAL DOOM-ROCK)]
       [character-inventory (make-inventory SWORD empty (list MAGIC-POTION HEALING-POTION) empty)]
       [weakness 'none] [resistance 'none]
       [animation (make-animation (flip-horizontal (bitmap/file "knight_standby.png"))
                                  (flip-horizontal (bitmap/file "knight_attack.png"))
                                  (flip-horizontal (bitmap/file "knight_standby.png"))
                                  (flip-horizontal (bitmap/file "knight_flinch.png"))
                                  (flip-horizontal (bitmap/file "knight_standby.png"))
                                  (flip-horizontal (bitmap/file "knight_standby.png")))]
       [position (make-posn 0 0)] [level 1] [max-mp 20] [mp 20] [current-xp 1500]))

(define NPC
  (new npc%
       [name "Rogue Knight"] [health 500] [max-health 500] 
       [base-agility .95] [agility 1] [base-strength 5]
       [strength 5] [spells (list EVIL-DOOM-ROCK)]
       [character-inventory (make-inventory STAFF empty (list HEALING-PHILTER) empty)]
       [weakness 'fire] [resistance 'ice]
       [animation (make-animation (bitmap/file "knight_standby.png")
                                  (bitmap/file "knight_attack.png")
                                  (bitmap/file "knight_standby.png")
                                  (bitmap/file "knight_flinch.png")
                                  (bitmap/file "knight_standby.png")
                                  (bitmap/file "knight_standby.png"))]
       [position (make-posn 0 0)] [xp-award 20]))

;; World ------------------------------------------------------------------------------------------------

;; a game is one of:
;; - world
;; - image
;; - string

;; a world is a (make-world player npc symbol symbol loi) where
;; the player is the player
;; the npc is an enemy
;; the first symbol is one of:
;; - 'p
;; - 'pa
;; - 'ps
;; - 'e
;; - 'ea
;; - 'w
;; - 'l
;; the second symbol is one of
;; - 'm
;; - 's
;; - 'i
;; - 'e
;; the list of images are the images in the animation queue
(define-struct world (player npc phase menu loi))

;; Render ------------------------------------------------------------------------------------------------ 

;; render: game --> image
;; renders the world as an image
(define (render w)
  (cond
    [(image? w) w]
    [(string? w) (overlay (above
                           (text "Choose your fighter!" 50 'black)
                           (text "1) Knight" 40 'black)
                           (text "2) Mage" 40 'black)
                           (text "3) Spellsword" 40 'black))
                          (rectangle 810 630 'solid 'gray))]
    [else (above
           (overlay (if (empty? (world-loi w)) (square 0 'solid 'white) (first (world-loi w)))
                    (render-npc (send (world-npc w) get-animation) (world-phase w))
                    (render-player (send (world-player w) get-animation) (world-phase w)) 
                    (above
                     (beside
                      (render-data (send (world-npc w) get-name) 
                                   (send (world-npc w) get-health)
                                   (send (world-npc w) get-max-health))
                      (rectangle 550 0 'solid 'white)
                      (render-data (send (world-player w) get-name)
                                   (send (world-player w) get-health)
                                   (send (world-player w) get-max-health)
                                   #:mp (send (world-player w) get-mp)
                                   #:max-mp (send (world-player w) get-max-mp)))
                     (rectangle 0 350 'solid 'white))
                    (bitmap/file "background.png")
                    (rectangle 810 460 'solid 'black))
           (overlay/align "middle" "top"
                          (render-menu (world-player w) (world-menu w))
                          (rectangle 810 170 'solid 'black)))]))

;; render-menu : player symbol --> image
;; takes a player and a symbol and outputs the appropriate menu
(define (render-menu p m)
  (cond  
    ;; main menu
    [(symbol=? m 'm) 
     (overlay 
      (beside 
       (overlay/align 
        "middle" "top" 
        (above (rectangle 0 21 'solid 'black) (text "1: Attack" 13 'black))
        (overlay (scale .17 (rotate 240 (bitmap/file "dagger.png")))
                 (rectangle 190 130 'solid 'gray) (rectangle 200 140 'solid 'black)))
       (rectangle 50 0 'solid 'black)
       (overlay/align 
        "middle" "top" 
        (above (rectangle 0 11 'solid 'black) (text "2: Items" 13 'black))
        (overlay (above (rectangle 0 20 'solid 'black) (scale .3 (bitmap/file "bottle.png")))
                 (rectangle 190 130 'solid 'gray) (rectangle 200 140 'solid 'black)))
       (rectangle 50 0 'solid 'black)
       (overlay/align 
        "middle" "top" 
        (above (rectangle 0 11 'solid 'black) (text "3: Spells" 13 'black))
        (overlay (above (rectangle 0 15 'solid 'black) 
                        (scale .14 (bitmap/file "phlogiston.png")))
                 (rectangle 190 130 'solid 'gray) (rectangle 200 140 'solid 'black))))
      (rectangle 800 165 'solid (make-color 60 60 60)))]
    ;; item menu
    [(symbol=? m 'i) 
     (cond 
       [(empty? (inventory-consumables (send p get-inventory)))
        (overlay (text "No Items Available!" 20 'white)
                 (rectangle 800 165 'solid (make-color 60 60 60)))]
       [(= (length (inventory-consumables (send p get-inventory))) 1)
        (overlay (render-item-block (first (inventory-consumables (send p get-inventory))))
                 (rectangle 800 165 'solid (make-color 60 60 60)))]
       [(= (length (inventory-consumables (send p get-inventory))) 2)
        (overlay 
         (beside 
          (render-item-block (first (inventory-consumables (send p get-inventory))))
          (rectangle 50 0 'solid 'orange)
          (render-item-block (second (inventory-consumables (send p get-inventory)))))
         (rectangle 800 165 'solid (make-color 60 60 60)))]
       [(= (length (inventory-consumables (send p get-inventory))) 3)
        (overlay
         (beside
          (render-item-block (first (inventory-consumables (send p get-inventory))))
          (rectangle 50 0 'solid 'orange)
          (render-item-block (second (inventory-consumables (send p get-inventory))))
          (rectangle 50 0 'solid 'black)
          (render-item-block (third (inventory-consumables (send p get-inventory)))))
         (rectangle 800 165 'solid (make-color 60 60 60)))]
       [else (overlay
              (beside
               (rotate 90 (overlay (isosceles-triangle 30 120 'solid 'white)
                                   (isosceles-triangle 40 120 'solid 'black)))
               (rectangle 15 0 'solid 'black)
               (render-item-block (first (inventory-consumables (send p get-inventory))))
               (rectangle 50 0 'solid 'orange)
               (render-item-block (second (inventory-consumables (send p get-inventory))))
               (rectangle 50 0 'solid 'black)
               (render-item-block (third (inventory-consumables (send p get-inventory))))
               (rectangle 15 0 'solid 'black)
               (rotate 270 (overlay (isosceles-triangle 30 120 'solid 'white)
                                    (isosceles-triangle 40 120 'solid 'black))))
              (rectangle 800 165 'solid (make-color 60 60 60)))])] 
    ;; spell menu
    [(symbol=? m 's)
     (cond 
       [(empty? (send p get-spells))
        (overlay (text "No Spells Available!" 20 'white)
                 (rectangle 800 165 'solid (make-color 60 60 60)))]
       [(= (length (send p get-spells)) 1)
        (overlay (render-spell-block (first (send p get-spells)))
                 (rectangle 800 165 'solid (make-color 60 60 60)))]
       [(= (length (send p get-spells)) 2)
        (overlay 
         (beside (render-spell-block (first (send p get-spells)))
                 (rectangle 50 0 'solid 'black)
                 (render-spell-block (second (send p get-spells))))
         (rectangle 800 165 'solid (make-color 60 60 60)))]
       [(= (length (send p get-spells)) 3)
        (overlay 
         (beside (render-spell-block (first (send p get-spells)))
                 (rectangle 50 0 'solid 'black)
                 (render-spell-block (second (send p get-spells)))
                 (rectangle 50 0 'solid 'black)
                 (render-spell-block (third (send p get-spells))))
         (rectangle 800 165 'solid (make-color 60 60 60)))]
       [else
        (overlay 
         (beside (rotate 90 (overlay (isosceles-triangle 30 120 'solid 'white)
                                     (isosceles-triangle 40 120 'solid 'black)))
                 (rectangle 15 0 'solid 'black)
                 (render-spell-block (first (send p get-spells)))
                 (rectangle 50 0 'solid 'black)
                 (render-spell-block (second (send p get-spells)))
                 (rectangle 50 0 'solid 'black)
                 (render-spell-block (third (send p get-spells)))
                 (rectangle 15 0 'solid 'black)
                 (rotate 270 (overlay (isosceles-triangle 30 120 'solid 'white)
                                      (isosceles-triangle 40 120 'solid 'black))))
         (rectangle 800 165 'solid (make-color 60 60 60)))])]
    [else (rectangle 800 165 'solid (make-color 60 60 60))]))



;; render-spell-block : item --> image
;; renders an spell block for a given spell
(define (render-spell-block s)
  (overlay/align 
   "middle" "top" 
   (above (rectangle 0 11 'solid 'black) 
          (text (spell-name s) 12 'black)
          (text (string-append "MP Cost: " (number->string (spell-cost s))) 10 'black))
   (overlay/align 
    "middle" "bottom"
    (above (text (spell-discription s) 10 'black)
           (rectangle 0 11 'solid 'black))
    (overlay (above (rectangle 0 (image-height (text "I" 12 'black)) 'solid 'black)
                    (spell-image s))
             (rectangle 190 130 'solid 'gray) 
             (rectangle 200 140 'solid 'black)))))

;; render-item-block : item --> image
;; renders an item block for a given image
(define (render-item-block i)
  (overlay/align 
   "middle" "top" 
   (above (rectangle 0 11 'solid 'black) 
          (text (string-append 
                 (send i get-name) ": " 
                 (number->string (send i get-number))) 
                13 'black))
   (overlay/align 
    "middle" "bottom"
    (above (text (send i get-description) 13 'black)
           (rectangle 0 11 'solid 'black))
    (overlay (send i get-image)
             (rectangle 190 130 'solid 'gray) 
             (rectangle 200 140 'solid 'black)))))

;; render-data: string num num #:num #:num --> image
;; renders given character data as an image
(define (render-data name health max-health #:mp [mp -999] #:max-mp [max-mp -999])
  (above
   (text name 13 'white)
   (if (>= 0 health) 
       (text (string-append "Health: 0/" (number->string max-health)) 13 'white) 
       (text (string-append "Health: " (number->string health) "/"
                            (number->string max-health)) 13 'white))
   (if (> 0 mp) 
       (square 0 'solid 'white) 
       (text (string-append "MP: "
                            (number->string mp) "/"
                            (number->string max-mp)) 13 'white))))

;; render-npc animation symbol --> image
;; takes an animation and a phase and outputs appropriate npc animation
(define (render-npc a p)
  (cond
    [(eq? p 'l) (animation-win a)]
    [(eq? p 'w) (animation-loose a)]
    [(eq? p 'ea) (animation-attack a)]
    [(eq? p 'pa) (animation-flinch a)]
    [(eq? p 'ps) (animation-flinch a)]
    [else (animation-standby a)]))

;; render-player animation symbol --> image
;; takes an animation and a phase and outputs appropriate player animation
(define (render-player a p)
  (cond
    [(eq? p 'l) (animation-loose a)]
    [(eq? p 'w) (animation-win a)]
    [(eq? p 'ea) (animation-flinch a)]
    [(eq? p 'pa) (animation-attack a)]
    [(eq? p 'ps) (animation-cast a)]
    [else (animation-standby a)]))

;; Tock ------------------------------------------------------------------------------------------------ 

;; tock: game --> game
(define (tock w)
  (if 
   (or (image? w) (string? w))
   w
   (cond
     [(not (empty? (world-loi w))) (make-world (world-player w) (world-npc w) (world-phase w) 'e (rest (world-loi w)))]
     [(send (world-player w) dead?) (overlay (above (text "You Died!" 50 'black) (text "Press Enter to replay" 40 'black)) (rectangle 810 630 'solid 'gray))]
     [(send (world-npc w) dead?) (overlay (above (text "You Win!" 50 'black) (text "Press Enter to replay" 40 'black)) (rectangle 810 630 'solid 'gray))]
     [(symbol=? (world-phase w) 'e) (npc-action w)]
     [(and (symbol=? (world-phase w) 'ea) (empty? (world-loi w))) (make-world (world-player w) (world-npc w) 'p 'm empty)]
     [(and (symbol=? (world-phase w) 'pa) (empty? (world-loi w))) (make-world (world-player w) (world-npc w) 'e 'e empty)]
     [(and (symbol=? (world-phase w) 'ps) (empty? (world-loi w))) (make-world (world-player w) (world-npc w) 'e 'e empty)]
     [else w])))

;; npc-action : world --> world
;; makes the npc take an action
(define (npc-action w)
  (cond
    [(and (> (/ (send (world-npc w) get-max-health) 4) (send (world-npc w) get-health))
          (not (empty? (inventory-consumables (send (world-npc w) get-inventory)))))
     (make-world
      (world-player w)
      (send (send (world-npc w) 
                  clone #:character-inventory 
                  (make-inventory
                   (inventory-weapon (send (world-npc w) get-inventory))
                   (inventory-equiped (send (world-npc w) get-inventory))
                   (if (> (send (first (inventory-consumables (send (world-npc w) get-inventory))) get-number) 1)
                       (cons (new consumable% 
                                  [image (send (first (inventory-consumables (send (world-npc w) get-inventory))) get-image)]
                                  [name (send (first (inventory-consumables (send (world-npc w) get-inventory))) get-name)]
                                  [description (send (first (inventory-consumables (send (world-npc w) get-inventory))) get-description)]
                                  [effect (send (first (inventory-consumables (send (world-npc w) get-inventory))) get-effect)]
                                  [animation (send (first (inventory-consumables (send (world-npc w) get-inventory))) get-animation)]
                                  [number (- (send (first (inventory-consumables (send (world-npc w) get-inventory))) get-number) 1)])
                             (rest (inventory-consumables (send (world-npc w) get-inventory))))
                       (rest (inventory-consumables (send (world-npc w) get-inventory))))
                   (inventory-miscellaneous (send (world-npc w) get-inventory))))
            use-consumable (first (inventory-consumables (send (world-npc w) get-inventory)))) 
      'ea 'e (send (first (inventory-consumables (send (world-npc w) get-inventory))) get-animation))]
    [(= (random 2) 1) (set-up-spell w (list-ref (send (world-npc w) get-spells) (random (length (send (world-npc w) get-spells)))))]
    [else
     (make-world
      (send (world-player w) apply-attack 
            (send (inventory-weapon (send (world-npc w) get-inventory)) get-accuracy) 
            (send (world-npc w) get-damage)
            (send (inventory-weapon (send (world-npc w) get-inventory)) get-type))
      (world-npc w)
      'ea
      'e
      (make-list 10 (bitmap/file "blankbackground.png")))]))

;; set-up-spell world spell --> world
;; takes a world and a spell cast by the enemy and outputs updated world
(define (set-up-spell w s)
  (make-world
   (send (world-player w) apply-spell s)
   (world-npc w)
   'ea
   'e
   (spell-animation s)))

;; Handle Key ------------------------------------------------------------------------------------------------ 

;; handle-key : game --> game
(define (handle-key w k)
  (cond
    [(image? w)
     (if (or
          (key=? k "escape")
          (key=? k "\r"))
         "string"
         w)]
    [(string? w)
     (cond
       [(key=? k "1") (make-world KNIGHT NPC 'p 'm empty)]
       [(key=? k "2") (make-world MAGE NPC 'p 'm empty)]
       [(key=? k "3") (make-world SPELLSWORD NPC 'p 'm empty)]
       [else w])]
    [else (if (symbol=? (world-phase w) 'p)
              (cond
                ;; main menu
                [(symbol=? (world-menu w) 'm)
                 (cond
                   [(key=? k "1") 
                    (make-world 
                     (world-player w) 
                     (send (world-npc w) apply-attack 
                           (send (inventory-weapon (send (world-player w) get-inventory)) get-accuracy)
                           (send (world-player w) get-damage) 
                           (send (inventory-weapon (send (world-player w) get-inventory)) get-type))
                     'pa 'e (make-list 10 (bitmap/file "blankbackground.png")))]
                   [(key=? k "2") 
                    (make-world (world-player w)
                                (world-npc w)
                                'p 'i empty)]
                   [(key=? k "3") 
                    (make-world (world-player w)
                                (world-npc w)
                                'p 's empty)]
                   [else w])]
                ;; spell menu
                [(symbol=? (world-menu w) 's)
                 (cond
                   [(and (> (length (send (world-player w) get-spells)) 0) (key=? k "1"))
                    (if (>= (send (world-player w) get-mp) (spell-cost (first (send (world-player w) get-spells))))
                        (if (eq? (spell-target (first (send (world-player w) get-spells))) 'player)
                            (make-world 
                             (send (send (world-player w) 
                                         clone #:mp (- (send (world-player w) get-mp) 
                                                       (spell-cost (first (send (world-player w) get-spells)))))
                                   apply-spell (first (send (world-player w) get-spells)))
                             (world-npc w) 'pa 'e (spell-animation (first (send (world-player w) get-spells))))
                            (make-world 
                             (send (world-player w) 
                                   clone #:mp (- (send (world-player w) get-mp) 
                                                 (spell-cost (first (send (world-player w) get-spells)))))
                             (send (world-npc w) apply-spell (first (send (world-player w) get-spells)))
                             'pa 'e (spell-animation (first (send (world-player w) get-spells))))) w)]
                   [(and (> (length (send (world-player w) get-spells)) 1) (key=? k "2"))
                    (if (>= (send (world-player w) get-mp) (spell-cost (second (send (world-player w) get-spells))))
                        (if (eq? (spell-target (second (send (world-player w) get-spells))) 'player)
                            (make-world 
                             (send (send (world-player w) 
                                         clone #:mp (- (send (world-player w) get-mp) 
                                                       (spell-cost (second (send (world-player w) get-spells)))))
                                   apply-spell (second (send (world-player w) get-spells)))
                             (world-npc w) 'pa 'e (spell-animation (second (send (world-player w) get-spells))))
                            (make-world 
                             (send (world-player w) 
                                   clone #:mp (- (send (world-player w) get-mp) 
                                                 (spell-cost (second (send (world-player w) get-spells)))))
                             (send (world-npc w) apply-spell (second (send (world-player w) get-spells)))
                             'pa 'e (spell-animation (second (send (world-player w) get-spells))))) w)]
                   [(and (> (length (send (world-player w) get-spells)) 2) (key=? k "3"))
                    (if (>= (send (world-player w) get-mp) (spell-cost (third (send (world-player w) get-spells))))
                        (if (eq? (spell-target (third (send (world-player w) get-spells))) 'player)
                            (make-world 
                             (send (send (world-player w) 
                                         clone #:mp (- (send (world-player w) get-mp) 
                                                       (spell-cost (third (send (world-player w) get-spells)))))
                                   apply-spell (third (send (world-player w) get-spells)))
                             (world-npc w) 'pa 'e (spell-animation (third (send (world-player w) get-spells))))
                            (make-world 
                             (send (world-player w) 
                                   clone #:mp (- (send (world-player w) get-mp) 
                                                 (spell-cost (third (send (world-player w) get-spells)))))
                             (send (world-npc w) apply-spell (third (send (world-player w) get-spells)))
                             'pa 'e (spell-animation (third (send (world-player w) get-spells))))) w)]
                   [(and (> (length (send (world-player w) get-spells)) 3) (or (key=? k "right") (key=? k "d")))
                    (make-world
                     (send (world-player w) 
                           clone #:spells (append (rest (rest (rest (send (world-player w) get-spells))))
                                                  (list (first (send (world-player w) get-spells))
                                                        (second (send (world-player w) get-spells))
                                                        (third (send (world-player w) get-spells)))))
                     (world-npc w) 'p 's empty)]
                   [(and (> (length (send (world-player w) get-spells)) 3) (or (key=? k "left") (key=? k "a")))
                    (make-world
                     (send (world-player w) 
                           clone #:spells (append (list (third (reverse (send (world-player w) get-spells)))
                                                        (second (reverse (send (world-player w) get-spells)))
                                                        (first (reverse (send (world-player w) get-spells))))
                                                  (reverse (rest (rest (rest (reverse (send (world-player w) get-spells))))))))
                     (world-npc w) 'p 's empty)]
                   [(or (key=? k "escape") (key=? k "\b"))
                    (make-world (world-player w)                                                
                                (world-npc w)
                                'p 'm empty)]
                   [else w])]
                ;; item menu
                [(symbol=? (world-menu w) 'i)
                 (cond
                   [(and (> (length (inventory-consumables (send (world-player w) get-inventory))) 0) (key=? k "1"))
                    (make-world 
                     (send (send (world-player w) clone #:character-inventory
                                 (make-inventory
                                  (inventory-weapon (send (world-player w) get-inventory))
                                  (inventory-equiped (send (world-player w) get-inventory))
                                  (if (> (send (first (inventory-consumables (send (world-player w) get-inventory))) get-number) 1)
                                      (cons (new consumable% 
                                                 [image (send (first (inventory-consumables (send (world-player w) get-inventory))) get-image)]
                                                 [name (send (first (inventory-consumables (send (world-player w) get-inventory))) get-name)]
                                                 [description (send (first (inventory-consumables (send (world-player w) get-inventory))) get-description)]
                                                 [effect (send (first (inventory-consumables (send (world-player w) get-inventory))) get-effect)]
                                                 [animation (send (first (inventory-consumables (send (world-player w) get-inventory))) get-animation)]
                                                 [number (- (send (first (inventory-consumables (send (world-player w) get-inventory))) get-number) 1)])
                                            (rest (inventory-consumables (send (world-player w) get-inventory))))
                                      (rest (inventory-consumables (send (world-player w) get-inventory))))
                                  (inventory-miscellaneous (send (world-player w) get-inventory))))
                           use-consumable (first (inventory-consumables (send (world-player w) get-inventory))))
                     (world-npc w) 'pa 'e (send (first (inventory-consumables (send (world-player w) get-inventory))) get-animation))]
                   [(and (> (length (inventory-consumables (send (world-player w) get-inventory))) 1) (key=? k "2"))
                    (make-world 
                     (send (send (world-player w) clone #:character-inventory
                                 (make-inventory
                                  (inventory-weapon (send (world-player w) get-inventory))
                                  (inventory-equiped (send (world-player w) get-inventory))
                                  (if (> (send (second (inventory-consumables (send (world-player w) get-inventory))) get-number) 1)
                                      (append
                                       (list (first (inventory-consumables (send (world-player w) get-inventory)))
                                             (new consumable% 
                                                  [image (send (second (inventory-consumables (send (world-player w) get-inventory))) get-image)]
                                                  [name (send (second (inventory-consumables (send (world-player w) get-inventory))) get-name)]
                                                  [description (send (second (inventory-consumables (send (world-player w) get-inventory))) get-description)]
                                                  [effect (send (second (inventory-consumables (send (world-player w) get-inventory))) get-effect)]
                                                  [animation (send (second (inventory-consumables (send (world-player w) get-inventory))) get-animation)]
                                                  [number (- (send (second (inventory-consumables (send (world-player w) get-inventory))) get-number) 1)]))
                                       (rest (rest (inventory-consumables (send (world-player w) get-inventory)))))
                                      (cons (first (inventory-consumables (send (world-player w) get-inventory))) (rest (rest (inventory-consumables (send (world-player w) get-inventory))))))
                                  (inventory-miscellaneous (send (world-player w) get-inventory))))
                           use-consumable (second (inventory-consumables (send (world-player w) get-inventory))))
                     (world-npc w) 'pa 'e (send (second (inventory-consumables (send (world-player w) get-inventory))) get-animation))]
                   [(and (> (length (inventory-consumables (send (world-player w) get-inventory))) 2) (key=? k "3"))
                    (make-world 
                     (send (send (world-player w) clone #:character-inventory
                                 (make-inventory
                                  (inventory-weapon (send (world-player w) get-inventory))
                                  (inventory-equiped (send (world-player w) get-inventory))
                                  (if (> (send (third (inventory-consumables (send (world-player w) get-inventory))) get-number) 1)
                                      (append
                                       (list (first (inventory-consumables (send (world-player w) get-inventory)))
                                             (second (inventory-consumables (send (world-player w) get-inventory)))
                                             (new consumable% 
                                                  [image (send (third (inventory-consumables (send (world-player w) get-inventory))) get-image)]
                                                  [name (send (third (inventory-consumables (send (world-player w) get-inventory))) get-name)]
                                                  [description (send (third (inventory-consumables (send (world-player w) get-inventory))) get-description)]
                                                  [effect (send (third (inventory-consumables (send (world-player w) get-inventory))) get-effect)]
                                                  [animation (send (third (inventory-consumables (send (world-player w) get-inventory))) get-animation)]
                                                  [number (- (send (third (inventory-consumables (send (world-player w) get-inventory))) get-number) 1)]))
                                       (rest (rest (rest (inventory-consumables (send (world-player w) get-inventory))))))
                                      (append (list (first (inventory-consumables (send (world-player w) get-inventory)))
                                                    (second (inventory-consumables (send (world-player w) get-inventory))))
                                              (rest (rest (rest (inventory-consumables (send (world-player w) get-inventory)))))))
                                  (inventory-miscellaneous (send (world-player w) get-inventory))))
                           use-consumable (third (inventory-consumables (send (world-player w) get-inventory))))
                     (world-npc w) 'pa 'e (send (third (inventory-consumables (send (world-player w) get-inventory))) get-animation))]
                   [(and (> (length (inventory-consumables (send (world-player w) get-inventory))) 3) (or (key=? k "right") (key=? k "d")))
                    (make-world
                     (send (world-player w) 
                           clone #:character-inventory
                           (make-inventory
                            (inventory-weapon (send (world-player w) get-inventory))
                            (inventory-equiped (send (world-player w) get-inventory))
                            (append (rest (rest (rest (inventory-consumables (send (world-player w) get-inventory)))))
                                    (list (first (inventory-consumables (send (world-player w) get-inventory)))
                                          (second (inventory-consumables (send (world-player w) get-inventory)))
                                          (third (inventory-consumables (send (world-player w) get-inventory)))))
                            (inventory-miscellaneous (send (world-player w) get-inventory))))
                     (world-npc w) 'p 'i empty)]
                   [(and (> (length (inventory-consumables (send (world-player w) get-inventory))) 3) (or (key=? k "left") (key=? k "a")))
                    (make-world
                     (send (world-player w) 
                           clone #:character-inventory
                           (make-inventory
                            (inventory-weapon (send (world-player w) get-inventory))
                            (inventory-equiped (send (world-player w) get-inventory))
                            (append (list (third (reverse (inventory-consumables (send (world-player w) get-inventory))))
                                          (second (reverse (inventory-consumables (send (world-player w) get-inventory))))
                                          (first (reverse (inventory-consumables (send (world-player w) get-inventory)))))
                                    (reverse (rest (rest (rest (reverse (inventory-consumables (send (world-player w) get-inventory))))))))
                            (inventory-miscellaneous (send (world-player w) get-inventory))))
                     (world-npc w) 'p 'i empty)]
                   [(or (key=? k "escape") (key=? k "\b"))
                    (make-world (world-player w)                                                
                                (world-npc w)
                                'p 'm empty)]
                   [else w])]) w)]))

;; Main ------------------------------------------------------------------------------------------------ 

;; main
(define (main w)
  (big-bang w
            [to-draw render]
            [on-tick tock]
            [on-key handle-key]))

;; run
(main (overlay (text "Press Enter to Play" 50 'black) (rectangle 810 630 'solid 'gray)))
