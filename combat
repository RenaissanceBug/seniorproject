#lang racket

;; ITEMS ----------------------------------------------------------------
(define base-item<%>
  (interface ()))

(define item%
  (class* object% (base-item<%>)
    (super-new)
    (init-field
     name ;; string that is the items name
     description ;; string that is the description of the item
     )))

(define wepon%
  (class* item% (base-item<%>)
    (super-new)
    (init-field
     wepon-damage ;; a nat that is the wepons damage
     wepon-accuracy ;; a nat between 0 and 1 that is the proboblity that the wepon will hit
     type;; a symbol that is the wepon's type
     )
    (define/public (get-accuracy) ;; produces wepon's accuracy
      wepon-accuracy)
    (define/public (get-damage) ;; produces wepon's damage
      wepon-damage)
    (define/public (get-type) ;; produces wepon's type
      type)))

(define equipment%
  (class* item% (base-item<%>)
    (super-new)
    (init-field
     defence ;; a nat that is the equipments defence
     equipment-portion ;; a symbol that is the portion of the body the equipment goes on
     )
    (define/public (get-defence) ;; produces the equipment's defence
      defence)
    (define/public (get-portion) ;; produces the equipment's portion
      equipment-portion)))

(define consumable%
  (class* item% (base-item<%>)
    (super-new)
    (init-field
     effect ;; a function that takes a character and produces a character
     )
    (define/public (get-effect) effect) ;; gets items effect
    ))

;; an invintory is a (make-invintory wepon list-of-equipment list-of-consumables list-of-items)
(define-struct invintory (wepon equiped consumables miscellaneous))

;; a spell is a (make-spell string string effect)
(define-struct spell (name discription effect))

;; CHARACTERS ----------------------------------------------------------------
(define base-character<%>
  (interface ()
    get-name ;; gets character's name
    get-health ;; gets character's health
    get-agility ;; gets character's agility
    get-strength ;; gets character's strength
    get-invintory ;; gets the character's invintory
    get-spells ;; gets the spells a character knows
    get-weakness ;; gets character's weakness
    get-damage ;; gets the damage a character can enflict
    dead? ;; true iff character is dead
    apply-attack ;; takes another character and applies an attack from that character to this one
    apply-spell ;; takes a spell and applies it to this character
    use-consumable ;; takes a consumable effect and applies it to this character
    ))

(define character%
  (class* object% (base-character<%>)
    (super-new)
    (init-field
     name ;; a string that is the character's name
     health ;; a nat that is the character's current health
     max-health ;; a nat that is the character's max health
     base-agility ;; a nat between 0 and 1 which is the probibility that a character will be hit by any given attack
     base-strength ;; a nat that is the character's base-strength
     character-invintory ;; the character's invintory
     spells ;; the spells the character knows
     weakness ;; a symbol that is the characters weakness. 'none if they have no weakness
     )
    (define/public (get-name) name)
    (define/public (get-health) health)
    (define/public (get-max-health) max-health)
    (define/public (get-agility) base-agility)
    (define/public (get-strength) base-strength)
    (define/public (get-invintory) character-invintory)
    (define/public (get-spells) spells)
    (define/public (get-weakness) weakness)
    (define/public (get-damage) 
      (+ (send (invintory-wepon character-invintory) get-damage) base-strength))
    (define/public (dead?) (<= health 0))
    (define/public (apply-spell spell)
      ((spell-effect spell) (new character%
                                 [name name]
                                 [health health]
                                 [max-health max-health]
                                 [base-agility base-agility]
                                 [base-strength base-strength]
                                 [character-invintory character-invintory]
                                 [spells spells]
                                 [weakness weakness])))
    (define/public (use-consumable c)
      ((send c get-effect) (new character%
                                [name name]
                                [health health]
                                [max-health max-health]
                                [base-agility base-agility]
                                [base-strength base-strength]
                                [character-invintory character-invintory]
                                [spells spells]
                                [weakness weakness])))
    (define/public (apply-attack attacker-accuracy
                                 attacker-damage
                                 wepon-type)
      (new character%
           [name name]
           [health (- health (if (< (* (* (get-agility) attacker-accuracy) 100) (random 100))
                                 0
                                 (local [(define (tally-defense e)
                                           (cond
                                             [(empty? e) 0]
                                             [(cons? e) (+ (send (first e) get-defence) (tally-defense (rest e)))]))
                                         (define (opposite-types? we wt)
                                           (cond
                                             [(and (eq? we 'water) (eq? wt 'fire)) true]
                                             [(and (eq? we 'wood) (eq? wt 'earth)) true]
                                             [(and (eq? we 'fire) (eq? wt 'metal)) true]
                                             [(and (eq? we 'earth) (eq? wt 'water)) true]
                                             [(and (eq? we 'metal) (eq? wt 'wood)) true]
                                             [else false]))
                                         (define (damage num)
                                           (if (<= (- num (tally-defense (invintory-equiped character-invintory))) base-strength)
                                               base-strength
                                               (- num (tally-defense (invintory-equiped character-invintory)))))]
                                   (cond
                                     [(and (eq? weakness wepon-type) (not (eq? weakness 'none)))
                                      (damage (- (round attacker-damage base-strength)))]
                                     [(opposite-types? weakness wepon-type)
                                      (round (damage (- (* .5 attacker-damage) base-strength)))]
                                     [else (damage (- attacker-damage base-strength))]))
                                 ))]
           [max-health max-health]
           [base-agility base-agility]
           [base-strength base-strength]
           [character-invintory character-invintory]
           [spells spells]
           [weakness weakness]))))

(define player%
  (class* character% (base-character<%>)
    (super-new)
    (init-field
     level ;; a nat that is the player's level
     mp ;; a nat that is the players mp
     current-xp ;; a nat that is the player's xp
     )
    (define/public (add-xp num) ;; adds xp-award to player's current xp
      (new player%
           [current-xp (+ current-xp num)]))))

(define npc%
  (class* character% (base-character<%>)
    (super-new)
    (init-field
     xp-award ;; the xp award you get for defeating the enemy
     )))

(module+ test
  (require rackunit)
  
  ;; SPELLS
  (define TESTSPELL1
    (make-spell
     "magic bomb"
     "bomb of fire"
     (lambda (c)
       (send c apply-attack 1 75 'fire))))
  (define TESTSPELL2
    (make-spell
     "heal"
     "+ 50 health"
     (lambda (c)
       (new character%
            [name (send c get-name)]
            [health (if (>= (+ 50 (send c get-health)) (send c get-max-health))
                        (send c get-max-health)
                        (+ 50 (send c get-health)))]
            [max-health (send c get-max-health)]
            [base-agility (send c get-agility)]
            [base-strength (send c get-strength)]
            [spells (send c get-spells)]
            [character-invintory (send c get-invintory)]
            [weakness (send c get-weakness)]))))

  ;; WEPONS
  (define TESTSWORD
    (new wepon%
         [name "Test Sword"]
         [description "A sword used exclusivly for testing the game."]
         [wepon-damage 50]
         [wepon-accuracy 1]
         [type 'metal]))

  ;; ARMOR
  (define TESTARMOR
    (new equipment%
         [name "Test Armor"]
         [description "Armor used exclusivly for testing the game"]
         [defence 20]
         [equipment-portion 'body]))

  ;; CONSUMABLES
  (define TESTPOTION
    (new consumable%
         [name "Test Potion"]
         [description "A potion used exclusivly for testing the game"]
         [effect (lambda (c)
                   (send c get-health))]))

  ;; PLAYERS
  (define TESTPLAYER1
    (new player%
         [name "Al"]
         [health 100]
         [max-health 100]
         [base-agility 1]
         [base-strength 5]
         [spells empty]
         [character-invintory (make-invintory TESTSWORD (list TESTARMOR) (list TESTSWORD TESTARMOR) (list TESTPOTION))]
         [weakness 'none]
         [level 5]
         [mp 20]
         [current-xp 1500]))
  
  (define TESTPLAYER2
    (new player%
         [name "Bob"]
         [health 25]
         [max-health 100]
         [base-agility 1]
         [base-strength 5]
         [spells (list TESTSPELL1 TESTSPELL2)]
         [character-invintory (make-invintory TESTSWORD (list TESTARMOR) (list TESTSWORD TESTARMOR) (list TESTPOTION))]
         [weakness 'none]
         [level 5]
         [mp 20]
         [current-xp 1500]))
  (define TESTPLAYER3
    (new player%
         [name "C"]
         [health 0]
         [max-health 100]
         [base-agility 1]
         [base-strength 5]
         [spells (list TESTSPELL1 TESTSPELL2)]
         [character-invintory (make-invintory TESTSWORD (list TESTARMOR) (list TESTSWORD TESTARMOR) (list TESTPOTION))]
         [weakness 'none]
         [level 5]
         [mp 20]
         [current-xp 1500]))

  ;; NPCs
  (define TESTNPC1
    (new npc%
         [name "Adam"]
         [health 100]
         [max-health 100]
         [base-agility 1]
         [base-strength 5]
         [spells empty]
         [character-invintory (make-invintory TESTSWORD (list TESTARMOR) (list TESTSWORD TESTARMOR) (list TESTPOTION))]
         [weakness 'none]
         [xp-award 20]))
  (define TESTNPC2
    (new npc%
         [name "Brian"]
         [health 25]
         [max-health 100]
         [base-agility 1]
         [base-strength 5]
         [spells (list TESTSPELL1 TESTSPELL2)]
         [character-invintory (make-invintory TESTSWORD (list TESTARMOR) (list TESTSWORD TESTARMOR) (list TESTPOTION))]
         [weakness 'fire]
         [xp-award 20]))
  (define TESTNPC3
    (new npc%
         [name "CC"]
         [health 0]
         [max-health 100]
         [base-agility 1]
         [base-strength 5]
         [spells (list TESTSPELL1 TESTSPELL2)]
         [character-invintory (make-invintory TESTSWORD (list TESTARMOR) (list TESTSWORD TESTARMOR) (list TESTPOTION))]
         [weakness 'none]
         [xp-award 20]))

  ;; TESTS
  (and
   ;; dead?
   (not (send TESTPLAYER1 dead?))
   (send TESTPLAYER3 dead?)
   (not (send TESTNPC1 dead?))
   (send TESTNPC3 dead?)
   ;; apply-attack
   (eq? (send (send TESTPLAYER1 apply-attack 1 50 'none) get-health) 75)
   (eq? (send (send TESTNPC1 apply-attack 1 50 'none) get-health) 75)
   (eq? (send (send TESTNPC2 apply-attack 1 50 'water) get-health) 88) ;; fix me
   ;; apply-spell
   (eq? (send (send TESTPLAYER1 apply-spell TESTSPELL1) get-health) 50)
   (eq? (send (send TESTPLAYER1 apply-spell TESTSPELL2) get-health) 100)
   (eq? (send (send TESTPLAYER2 apply-spell TESTSPELL2) get-health) 75)))
