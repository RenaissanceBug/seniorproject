#lang racket

;; ITEMS ----------------------------------------------------------------
(define base-item<%>
  (interface ()))

(define item%
  (class* object% (base-item<%>)
    (super-new)
    (init-field
     name ;; string that is the items name
     description ;; string that is the description of the item
     )))

(define wepon%
  (class* item% (base-item<%>)
    (super-new)
    (init-field
     wepon-damage ;; a nat that is the wepons damage
     wepon-accuracy ;; a nat between 0 and 1 that is the proboblity that the wepon will hit
     type;; a symbol that is the wepon's type
     )
    (define/public (get-accuracy) ;; produces wepon's accuracy
      wepon-accuracy)
    (define/public (get-damage) ;; produces wepon's damage
      wepon-damage)
    (define/public (get-type) ;; produces wepon's type
      type)))

(define equipment%
  (class* item% (base-item<%>)
    (super-new)
    (init-field
     defence ;; a nat that is the equipments defence
     equipment-portion ;; a symbol that is the portion of the body the equipment goes on
     )
    (define/public (get-defence) ;; produces the equipment's defence
      defence)
    (define/public (get-portion) ;; produces the equipment's portion
      equipment-portion)))

(define consumable%
  (class* item% (base-item<%>)
    (super-new)
    (init-field
     effect ;; a function that takes a character and produces a character
     )))

;; an invintory is a (make-invintory wepon list-of-equipment list-of-consumables list-of-items)
(define-struct invintory (wepon equiped consumables miscellaneous))

;; a spell is a (make-spell string string effect)
(define-struct spell (name discription effect))

;; CHARACTERS ----------------------------------------------------------------
(define base-character<%>
  (interface ()
    dead? ;; true iff character is dead
    apply-attack ;; takes another character and applies an attack from that character to this one
    apply-spell ;; takes a spell and applies it to this character
    use-consumable ;; takes a consumable and applies it to this character
    get-agility ;; gets character's agility
    get-damage ;; gets the damage a character can enflict
    ))

(define character%
  (class* object% (base-character<%>)
    (super-new)
    (init-field
     name ;; a string that is the character's name
     health ;; a nat that is the character's current health
     max-health ;; a nat that is the character's max health
     base-agility ;; a nat between 0 and 1 which is the probibility that a character will be hit by any given attack
     base-strength ;; a nat that is the character's base-strength
     character-invintory ;; the character's invintory
     spells ;; the spells the character knows
     weakness ;; a symbol that is the characters weakness. 'none if they have no weakness
     )
    (define/public (dead?) (<= health 0))
    (define/public (apply-attack attacker-accuracy
                                 attacker-damage
                                 wepon-type)
      (new character%
           [health (- health (if (< (* (* (- 1 (get-agility)) attacker-accuracy) 100) (random 100))
                                 0
                                 (local [(define (tally-defense e)
                                           (cond
                                             [(empty? e) 0]
                                             [(cons? e) (+ (send (first e) get-defense) (tally-defense (rest e)))]))
                                         (define (opposite-types? we wt) false) ;; fix me
                                         (define (damage num)
                                           (if (<= (- num (tally-defense (invintory-equiped character-invintory))) base-strength)
                                               base-strength
                                               (- num (tally-defense (invintory-equiped character-invintory)))))]
                                   (cond
                                     [(eq? weakness wepon-type)
                                      (* 2 (damage (- attacker-damage base-strength)))]
                                     [(opposite-types? weakness wepon-type)
                                      (* .5 (damage (- attacker-damage base-strength)))]
                                     [else (damage (- attacker-damage base-strength))]))
                                 ))]))
    (define/public (apply-spell spell)
      (spell character%))
    (define/public (use-consumable c)
      (c character%))
    (define/public (get-agility) base-agility) 
    (define/public (get-damage) 
      (+ (send (invintory-wepon character-invintory) wepon-damage) base-strength))))



(define player%
  (class* character% (base-character<%>)
    (super-new)
    (init-field
     level ;; a nat that is the player's level
     mp ;; a nat that is the players mp
     current-xp ;; a nat that is the player's xp
     )
    (define/public (add-xp num) ;; adds xp-award to player's current xp
      (new player%
           [current-xp (+ current-xp num)]))))

(define npc%
  (class* character% (base-character<%>)
    (super-new)
    (init-field
     xp-award ;; the xp award you get for defeating the enemy
     )))

(module+ test
  (require rackunit)
  (define TESTSWORD
    (new wepon%
         [name "Test Sword"]
         [description "A sword used exclusivly for testing the game."]
         [wepon-damage 50]
         [wepon-accuracy .95]
         [type 'metal])))
